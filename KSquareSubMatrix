public class KSquareSubMatrix {
	// Size of given matrix
	static final int n = 5;

	// A simple function to find sum of all
	// sub-squares of size k x k in a given
	// square matrix of size n x n
	static void printSumSimple(int mat[][], int k) {
		// k must be smaller than or
		// equal to n
		if (k > n)
			return;
		// row number of first cell in
		// current sub-square of size k x k
		for (int i = 0; i < n - k + 1; i++) {
			// column of first cell in current
			// sub-square of size k x k
			for (int j = 0; j < n - k + 1; j++) {
				// Calculate and print sum of
				// current sub-square
				int sum = 0;
				for (int p = i; p < k + i; p++)
					for (int q = j; q < k + j; q++)
						sum += mat[p][q];
				System.out.print(sum + " ");
			}
			// Line separator for sub-squares
			// starting with next row
			System.out.println();
		}
	}
	static void printMatrix(int mat[][]) {
		for(int i=0;i<mat.length;i++) {
			for(int j=0;j<mat[i].length;j++) {
				System.out.print(mat[i][j] + " ");
			}
			System.out.println();
		}
		System.out.println();
	}
	static void printSumTricky(int mat[][], int k) {

		// k must be smaller than or equal to n
		if (k > n)
			return;

		// 1: PREPROCESSING
		// To store sums of all strips of size k x 1
		int stripSum[][] = new int[n][n];

		// Go All column by column
		for (int j = 0; j < n; j++) {
			// Calculate sum of first k x 1
			// rectangle in this column
			int sum = 0;
			for (int i = 0; i < k; i++)
				sum += mat[i][j];
			stripSum[0][j] = sum;
//			System.out.print(j+"\t");
			// Calculate sum of remaining rectangles
			System.out.println("-------------------- pass "+j);
			printMatrix(stripSum);
			for (int i = 1; i < n - k + 1; i++) {
				sum += (mat[i + k - 1] [j] - mat[i - 1][j]);
				stripSum[i][j] = sum;
			}
			printMatrix(stripSum);
		}

		// 2: CALCULATE SUM of Sub-Squares
		// using stripSum[][]
		for (int i = 0; i < n - k + 1; i++) {

			// Calculate and print sum of first
			// subsquare in this row
			int sum = 0;
			for (int j = 0; j < k; j++)
				sum += stripSum[i][j];
			System.out.print(sum + " ");

			// Calculate sum of remaining squares
			// in current row by removing the
			// leftmost strip of previous sub-square
			// and adding a new strip
			for (int j = 1; j < n - k + 1; j++) {
				sum += (stripSum[i][j + k - 1] - stripSum[i][j - 1]);
				System.out.print(sum + " ");
			}
			System.out.println();
		}
	}

	// Driver Program to test above function
	public static void main(String arg[]) {
		int mat[][] = { { 1, 1, 1, 1, 1 }, { 2, 2, 2, 2, 2 }, { 3, 3, 3, 3, 3 }, { 4, 4, 4, 4, 4 }, { 5, 5, 5, 5, 5 } };
		int k = 3;
		printSumTricky(mat, k);
//        printSumSimple(mat, k);
	}
}
